"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

randomBalls(randomBalls_canvasID);

function randomBalls(cnavasID) {
  var body = document.querySelector('body');
  var canvas = document.getElementById(cnavasID);
  var ctx = canvas.getContext('2d');
  canvas.style.backgroundColor = randomBalls_canvasColor;
  canvas.style.top = '0';
  canvas.style.left = '0';

  if (randomBalls_canvasSize) {
    var _container = canvas.parentElement;
    _container.style.position = 'relative';
    canvas.style.position = 'absolute';
  } else {
    body.style.minHeight = '100vh';
    canvas.style.position = 'fixed';
  }

  function init() {
    if (randomBalls_canvasSize) {
      var containerWidth = container.getBoundingClientRect().width;
      var containerHeight = container.getBoundingClientRect().height;
      canvas.width = containerWidth;
      canvas.height = containerHeight;
    } else {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    var Circle = /*#__PURE__*/function () {
      function Circle(x, y, r, c) {
        _classCallCheck(this, Circle);

        this.x = x;
        this.y = y;
        this.r = r;
        this.c = c;
        this.dx = Math.random() * randomBalls_ballsSpeed + 1;
        this.dx *= Math.floor(Math.random() * Math.round(randomBalls_ballsSpeed / 2)) === 1 ? 1 : -1;
        this.dy = Math.random() * randomBalls_ballsSpeed + 1;
        ;
        this.dy *= Math.floor(Math.random() * Math.round(randomBalls_ballsSpeed / 2)) === 1 ? 1 : -1;
      }

      _createClass(Circle, [{
        key: "draw",
        value: function draw() {
          ctx.beginPath();
          ctx.fillStyle = this.c;
          ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2);
          ctx.fill();
        }
      }, {
        key: "animate",
        value: function animate() {
          this.x += this.dx;
          this.y += this.dy;

          if (this.x + this.r > canvas.width || this.x - this.r < 0) {
            this.dx = -this.dx;
            this.dy = -this.dy;
          }

          this.draw();
        }
      }]);

      return Circle;
    }();

    var balls = [];

    for (var i = 0; i < randomBalls_initialBalls; i++) {
      var r = Math.floor(Math.random() * randomBalls_ballsSize) + Math.round(randomBalls_ballsSize / 2);
      var x = Math.random() * (canvas.width - r * 2) + r;
      var y = Math.random() * (canvas.height - r * 2) + r;
      var o = Number('0.' + (Math.floor(Math.random() * randomBalls_initialBallsOpacity) + 1));
      var c = "rgba(".concat(randomBalls_initialBallsColor[0], ",").concat(randomBalls_initialBallsColor[1], ",").concat(randomBalls_initialBallsColor[2], ",").concat(o, ")");
      balls.push(new Circle(x, y, r, c));
    }

    function drawExtraBall(e) {
      e.stopPropagation();

      if (balls.length < randomBalls_initialBalls + randomBalls_extraBallsMax) {
        var _r = Math.floor(Math.random() * randomBalls_ballsSize) + Math.round(randomBalls_ballsSize / 2);

        balls.push(new Circle(e.clientX, e.clientY, _r, randomBalls_extraBallsColor));
      }
    }

    function upDate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      for (var _i = 0; _i < balls.length; _i++) {
        balls[_i].animate();
      }

      requestAnimationFrame(upDate);
    }

    upDate();
    canvas.addEventListener('click', drawExtraBall, false);
  }

  window.addEventListener('load', init);
  window.addEventListener('resize', init);
}
